{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Association rules - framework\n",
    "\n",
    "\n",
    "[1] Agrawal, R.; Imieli≈Ñski, T.; Swami, A. (1993). \"Mining association rules between sets of items in large databases\". Proceedings of the 1993 ACM SIGMOD international conference on Management of data - SIGMOD '93. p. 207.\n",
    "\n",
    "The dataset in the association rules framework is defined as a set of `transactions` $t$. The entire dataset is referred to as `database` $D = \\{t_1, t_2, ..., t_n\\}$ and the attributes are called `items` $I = \\{i_1,i_2, ..., i_m\\}$. This terminology stems from the analysis of supermaket transactions, which was introduced in the original paper, which discusses the problem of association rule mining[1]. For now we will use this limitted interpretation, and then we will generalize it. Transactions are independent of each other and are comprised of sets of purchased items. Take a look at the example:\n",
    "\n",
    "   | Transaction | Milk | Cookies | Bread |\n",
    "   | --- | --- | --- | --- | \n",
    "   | #1 | 1 | 1 | 1 |\n",
    "   | #2 | 1 | 1 | 0 |\n",
    "   | #3 | 0 | 1 | 0 |\n",
    "   | #4 | 0 | 1 | 1 |\n",
    "\n",
    "Note that the values of items are binary. Either milk was bought, or not.\n",
    "\n",
    "\n",
    "In this framework a rule is defined as \n",
    "\n",
    "$$ X \\rightarrow Y : X,Y \\subseteq I $$\n",
    "\n",
    " Basically a rule that states: \"if a user bought X (where X is a subset of items), then he also bought Y (Y is also a subset of items)\"(In the original work, $|Y|=1$). In this framework, $X$ is called antecedent and $Y$ is called consequent. Let's take a look at the example again. In this case the following rule is always true:\n",
    "\n",
    "\n",
    "$$ \\{Milk\\} \\rightarrow \\{Cookies\\}$$\n",
    "\n",
    "It doesn't mean that \n",
    "\n",
    "$$ \\{Cookies\\} \\rightarrow \\{Milk\\}$$\n",
    "\n",
    "is always true.\n",
    "\n",
    "Let's load a sample database.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Hair Conditioner', 'Lemons', 'Standard coffee', 'Frozen Chicken Wings',\n",
      "       '98pct. Fat Free Hamburger', 'Sugar Cookies', 'Onions', 'Deli Ham',\n",
      "       'Dishwasher Detergent', 'Beets',\n",
      "       ...\n",
      "       'Lollipops', 'Plain White Bread', 'Blueberry Yogurt',\n",
      "       'Frozen Chicken Thighs', 'Mixed Vegetables', 'Souring Pads',\n",
      "       'Tuna Spread', 'Toilet Paper', 'White Wine', 'Columbian Coffee'],\n",
      "      dtype='object', length=255)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hair Conditioner</th>\n",
       "      <th>Lemons</th>\n",
       "      <th>Standard coffee</th>\n",
       "      <th>Frozen Chicken Wings</th>\n",
       "      <th>98pct. Fat Free Hamburger</th>\n",
       "      <th>Sugar Cookies</th>\n",
       "      <th>Onions</th>\n",
       "      <th>Deli Ham</th>\n",
       "      <th>Dishwasher Detergent</th>\n",
       "      <th>Beets</th>\n",
       "      <th>...</th>\n",
       "      <th>Lollipops</th>\n",
       "      <th>Plain White Bread</th>\n",
       "      <th>Blueberry Yogurt</th>\n",
       "      <th>Frozen Chicken Thighs</th>\n",
       "      <th>Mixed Vegetables</th>\n",
       "      <th>Souring Pads</th>\n",
       "      <th>Tuna Spread</th>\n",
       "      <th>Toilet Paper</th>\n",
       "      <th>White Wine</th>\n",
       "      <th>Columbian Coffee</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1356</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1357</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1358</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1359</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1360</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1361 rows √ó 255 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Hair Conditioner  Lemons  Standard coffee  Frozen Chicken Wings   \n",
       "0                    0       0                0                     0  \\\n",
       "1                    0       0                0                     0   \n",
       "2                    0       0                0                     0   \n",
       "3                    0       0                0                     0   \n",
       "4                    0       0                0                     0   \n",
       "...                ...     ...              ...                   ...   \n",
       "1356                 0       0                0                     0   \n",
       "1357                 0       0                0                     0   \n",
       "1358                 0       0                0                     1   \n",
       "1359                 1       0                0                     0   \n",
       "1360                 0       0                0                     0   \n",
       "\n",
       "      98pct. Fat Free Hamburger  Sugar Cookies  Onions  Deli Ham   \n",
       "0                             0              0       0         0  \\\n",
       "1                             0              0       0         0   \n",
       "2                             0              0       0         0   \n",
       "3                             0              0       0         0   \n",
       "4                             0              0       0         0   \n",
       "...                         ...            ...     ...       ...   \n",
       "1356                          0              0       0         0   \n",
       "1357                          0              0       0         0   \n",
       "1358                          1              1       1         0   \n",
       "1359                          1              1       0         0   \n",
       "1360                          1              0       0         0   \n",
       "\n",
       "      Dishwasher Detergent  Beets  ...  Lollipops  Plain White Bread   \n",
       "0                        0      0  ...          0                  0  \\\n",
       "1                        0      0  ...          0                  0   \n",
       "2                        0      0  ...          0                  0   \n",
       "3                        0      0  ...          0                  0   \n",
       "4                        0      0  ...          0                  0   \n",
       "...                    ...    ...  ...        ...                ...   \n",
       "1356                     0      0  ...          0                  0   \n",
       "1357                     0      0  ...          0                  0   \n",
       "1358                     0      0  ...          1                  0   \n",
       "1359                     0      0  ...          0                  0   \n",
       "1360                     0      0  ...          0                  0   \n",
       "\n",
       "      Blueberry Yogurt  Frozen Chicken Thighs  Mixed Vegetables  Souring Pads   \n",
       "0                    0                      0                 0             0  \\\n",
       "1                    0                      0                 0             0   \n",
       "2                    0                      0                 0             0   \n",
       "3                    0                      0                 0             0   \n",
       "4                    0                      0                 0             0   \n",
       "...                ...                    ...               ...           ...   \n",
       "1356                 0                      0                 0             0   \n",
       "1357                 0                      0                 0             0   \n",
       "1358                 0                      0                 0             0   \n",
       "1359                 0                      1                 0             1   \n",
       "1360                 0                      0                 0             0   \n",
       "\n",
       "      Tuna Spread  Toilet Paper  White Wine  Columbian Coffee  \n",
       "0               0             0           0                 0  \n",
       "1               0             0           0                 0  \n",
       "2               0             0           0                 0  \n",
       "3               0             0           0                 0  \n",
       "4               0             0           0                 0  \n",
       "...           ...           ...         ...               ...  \n",
       "1356            0             0           1                 0  \n",
       "1357            0             0           0                 0  \n",
       "1358            0             0           0                 0  \n",
       "1359            0             1           0                 0  \n",
       "1360            0             0           0                 0  \n",
       "\n",
       "[1361 rows x 255 columns]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "marketbasket = pd.read_csv('marketbasket.csv')\n",
    "marketbasket = marketbasket.rename(columns = lambda x : x.strip())\n",
    "print(marketbasket.columns)\n",
    "marketbasket"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this database we have a total of 1361 transactions and 255 items. We are also going to create a very small toy dataset to illustrate the ideas (the same dataset is used in the [Wikipedia article](https://en.wikipedia.org/wiki/Association_rule_learning) on the Association Rules).\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Milk</th>\n",
       "      <th>Bread</th>\n",
       "      <th>Butter</th>\n",
       "      <th>Beer</th>\n",
       "      <th>Diapers</th>\n",
       "      <th>Egg</th>\n",
       "      <th>Fruit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Milk  Bread  Butter  Beer  Diapers  Egg  Fruit\n",
       "0     1      1       0     0        0    0      1\n",
       "1     0      0       1     0        0    1      1\n",
       "2     0      0       0     1        1    0      0\n",
       "3     1      1       1     0        0    1      1\n",
       "4     0      1       0     0        0    0      0"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data = {\n",
    "    'Milk' : [1,0,0,1,0],\n",
    "    'Bread' : [1,0,0,1,1],\n",
    "    'Butter' : [0,1,0,1,0],\n",
    "    'Beer' : [0,0,1,0,0],\n",
    "    'Diapers' : [0,0,1,0,0],\n",
    "    'Egg' : [0,1,0,1,0],\n",
    "    'Fruit' : [1,1,0,1,0]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A rule becomes an association rule when it surpasses a given threshold in key metrics. By far the most common combination of the metrics, which determine thresholds for an association rules are support and confidence.\n",
    "\n",
    "\n",
    "## Support\n",
    "\n",
    "Support is given as a frequency of an itemset in the entire database. For example, in this database, the itemset $\\{fruit\\}$ appeared 3 times out of a total of 5 transactions, which means that support for this itemset is equal to $supp(\\{fruit\\}) = \\frac{3}{5}=0.6$. Fruit in combination with bread appeared 2 times in the entire dataset, so $supp(\\{fruit, bread\\}) = \\frac{2}{5} = 0.4$. We can formalize the support as \n",
    "\n",
    "$$supp(X) = P(\\bigcap_{A_i \\in X}A_i) = \\frac{\\textrm{number of transactions, with an item for all categories in the subset X}}{\\textrm{total number of transactions}}$$\n",
    "\n",
    "Let's calculate support for each one-item subset in the toy dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Milk</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bread</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Butter</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beer</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Egg</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      item  support\n",
       "0     Milk      0.4\n",
       "1    Bread      0.6\n",
       "2   Butter      0.4\n",
       "3     Beer      0.2\n",
       "4  Diapers      0.2\n",
       "5      Egg      0.4\n",
       "6    Fruit      0.6"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "subsets = df.columns.values.reshape(7,1)\n",
    "\n",
    "support = pd.DataFrame(subsets, columns = ['item'])\n",
    "support['support'] = support.apply(lambda x : df[x['item']].sum()/df.shape[0], axis=1)\n",
    "support"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now calculate the support for itemsets, which consist of two items."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "subsets = df.columns.values.reshape(-1,1)\n",
    "#take all columns from the dataset\n",
    "items = pd.DataFrame(subsets, columns = ['item'])\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " | item |\n",
    " | --- |\n",
    " | bread |\n",
    " | butter |\n",
    " | diapers |\n",
    " | egg |\n",
    " | fruit |\n",
    " | milk |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create a cross product for all column names\n",
    "sc = items.merge(items, how='cross')\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " | item_x\\item_y | beer | bread | butter | diapers | egg | fruit | milk |\n",
    " | --- |  --- |  --- |  --- |  --- |  --- |  --- | --- |\n",
    "  | beer | (beer, beer) | (beer,bread) |  (beer, butter) | (beer,diapers) | (beer, egg) |  (beer, fruit) | (beer,milk) |\n",
    " | bread | (bread, beer) | (bread,bread) |  (bread, butter) | (bread,diapers) | (bread, egg) |  (bread, fruit) | (bread,milk) |\n",
    " | butter | (butter, beer) | (butter,bread) |  (butter, butter) | (butter, diapers) | (butter,egg) |  (butter, fruit) |  (butter, milk) |\n",
    " | diapers | (diapers, beer) | (diapers, bread) | (diapers, butter) | (diapers, diapers) |  (diapers,egg) | (diapers, fruit) | (diapers, milk) |\n",
    " | egg | (egg, beer) |(egg, bread) | (egg, butter) | (egg, diapers) |  (egg,egg) | (egg, fruit) | (egg, milk) |\n",
    " | fruit | (fruit, beer) |(fruit, bread) | (fruit, butter) | (fruit, diapers) |  (fruit,egg) | (fruit, fruit) | (fruit, milk) |\n",
    " | milk | (milk, beer) |(milk, bread) | (milk, butter) | (milk, diapers) |  (milk,egg) | (milk, fruit) | (milk, milk) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "#take only the lower triangle of the cross product\n",
    "support_two_items = sc[(sc['item_x'] > sc['item_y'])][['item_x','item_y']].reset_index()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " | item_x\\item_y | beer | bread | butter | diapers | egg | fruit | milk |\n",
    " | --- |  --- |  --- |  --- |  --- |  --- |  --- | --- |\n",
    "  | beer | \n",
    " | bread | (bread, beer) \n",
    " | butter | (butter, beer) | (butter,bread) \n",
    " | diapers | (diapers, beer) | (diapers, bread) | (diapers, butter) \n",
    " | egg | (egg, beer) |(egg, bread) | (egg, butter) | (egg, diapers) \n",
    " | fruit | (fruit, beer) |(fruit, bread) | (fruit, butter) | (fruit, diapers) \n",
    " | milk | (milk, beer) |(milk, bread) | (milk, butter) | (milk, diapers) |  (milk,egg) | (milk, fruit) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>item_x</th>\n",
       "      <th>item_y</th>\n",
       "      <th>support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Milk</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Milk</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Milk</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Milk</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Milk</td>\n",
       "      <td>Egg</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Milk</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10</td>\n",
       "      <td>Bread</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>15</td>\n",
       "      <td>Butter</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17</td>\n",
       "      <td>Butter</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>29</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>30</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>31</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>36</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>37</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>38</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>39</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>43</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>44</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>45</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>46</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>47</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index   item_x   item_y  support\n",
       "0       1     Milk    Bread      0.4\n",
       "1       2     Milk   Butter      0.2\n",
       "2       3     Milk     Beer      0.0\n",
       "3       4     Milk  Diapers      0.0\n",
       "4       5     Milk      Egg      0.2\n",
       "5       6     Milk    Fruit      0.4\n",
       "6      10    Bread     Beer      0.0\n",
       "7      15   Butter    Bread      0.2\n",
       "8      17   Butter     Beer      0.0\n",
       "9      29  Diapers    Bread      0.0\n",
       "10     30  Diapers   Butter      0.0\n",
       "11     31  Diapers     Beer      0.2\n",
       "12     36      Egg    Bread      0.2\n",
       "13     37      Egg   Butter      0.4\n",
       "14     38      Egg     Beer      0.0\n",
       "15     39      Egg  Diapers      0.0\n",
       "16     43    Fruit    Bread      0.4\n",
       "17     44    Fruit   Butter      0.4\n",
       "18     45    Fruit     Beer      0.0\n",
       "19     46    Fruit  Diapers      0.0\n",
       "20     47    Fruit      Egg      0.4"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculate the support for each pair\n",
    "support_two_items['support'] = support_two_items.apply(lambda x : df[(df[x['item_x']] == 1) & (df[x['item_y']] == 1)].shape[0]/df.shape[0], axis=1)\n",
    "support_two_items"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Before we go any further let's discuss one more thing. The definition of support for a rule $X \\rightarrow Y$ is given by $supp(X\\cup Y)$. In terms of support the antecedent and consequent itemsets are treated equally, as $supp(X\\cup Y) = supp(Y \\cup X)$. \n",
    "\n",
    "## Confidence\n",
    "\n",
    "While support tells us, how frequently the rule appears in the data, confidence tells us how precise is the rule. Confidence is given by \n",
    "\n",
    "$$conf(X \\rightarrow Y) = \\frac{supp(X \\cup Y)}{supp(X)}$$\n",
    "\n",
    "Notice the similarity between the definition of confidence and Bayes theorem. It's not accidental, technically confidence is implemented as a conditional probability. We can use the previously calculated values of support to calculate the confidence for itemsets, which consist of one item.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedent</th>\n",
       "      <th>consequent</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.4</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Egg</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>0.4</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Bread</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Butter</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Butter</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Diapers</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Diapers</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Diapers</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Egg</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Egg</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.4</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Egg</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>Bread</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>Butter</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   antecedent consequent  support  confidence\n",
       "0        Milk      Bread      0.4    1.000000\n",
       "1        Milk     Butter      0.2    0.500000\n",
       "2        Milk       Beer      0.0    0.000000\n",
       "3        Milk    Diapers      0.0    0.000000\n",
       "4        Milk        Egg      0.2    0.500000\n",
       "5        Milk      Fruit      0.4    1.000000\n",
       "6       Bread       Beer      0.0    0.000000\n",
       "7      Butter      Bread      0.2    0.500000\n",
       "8      Butter       Beer      0.0    0.000000\n",
       "9     Diapers      Bread      0.0    0.000000\n",
       "10    Diapers     Butter      0.0    0.000000\n",
       "11    Diapers       Beer      0.2    1.000000\n",
       "12        Egg      Bread      0.2    0.500000\n",
       "13        Egg     Butter      0.4    1.000000\n",
       "14        Egg       Beer      0.0    0.000000\n",
       "15        Egg    Diapers      0.0    0.000000\n",
       "16      Fruit      Bread      0.4    0.666667\n",
       "17      Fruit     Butter      0.4    0.666667\n",
       "18      Fruit       Beer      0.0    0.000000\n",
       "19      Fruit    Diapers      0.0    0.000000\n",
       "20      Fruit        Egg      0.4    0.666667"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confidence = support_two_items.apply(lambda x: \n",
    "                                        {'antecedent' : x['item_x'], \n",
    "                                         'consequent' : x['item_y'], \n",
    "                                         'support' : x['support'],\n",
    "                                         'confidence': x['support'] / support[(support['item'] == x['item_x'])]['support'].values[0]}, axis=1)\n",
    "\n",
    "pd.DataFrame(confidence.tolist())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Frequent Itemsets\n",
    "\n",
    "We have evaluated the values of support and confidence for itemsets of a size one. Now we need to expand our analysis to all possible subsets of items. I hope that you can clearly see the problem. If our dataset contains a lot of items, the number of possible combinations gets really large, really quickly (as quickly as $2^n$ for $n$ items). This problem is solved by algorithms of discovering frequent datasets.\n",
    "\n",
    "Before we solve the problem using algorithms of discovering frequent datasets let's implement the brute force algoritm. We are going to evaluate its performance in the context of frequently used, common algorithms for discovering frequent datasets.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Milk</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bread</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Butter</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beer</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Diapers</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Bread</td>\n",
       "      <td>Beer</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Butter</td>\n",
       "      <td>Bread</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Butter</td>\n",
       "      <td>Beer</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Butter</td>\n",
       "      <td>Bread</td>\n",
       "      <td>Beer</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Milk</td>\n",
       "      <td>Fruit</td>\n",
       "      <td>Egg</td>\n",
       "      <td>Diapers</td>\n",
       "      <td>Butter</td>\n",
       "      <td>Bread</td>\n",
       "      <td>Beer</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>127 rows √ó 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0      1        2        3       4      5     6  support\n",
       "0       Milk   None     None     None    None   None  None      0.4\n",
       "1      Bread   None     None     None    None   None  None      0.6\n",
       "2     Butter   None     None     None    None   None  None      0.4\n",
       "3       Beer   None     None     None    None   None  None      0.2\n",
       "4    Diapers   None     None     None    None   None  None      0.2\n",
       "..       ...    ...      ...      ...     ...    ...   ...      ...\n",
       "122     Milk  Fruit      Egg  Diapers   Bread   Beer  None      0.0\n",
       "123     Milk  Fruit      Egg  Diapers  Butter  Bread  None      0.0\n",
       "124     Milk  Fruit      Egg  Diapers  Butter   Beer  None      0.0\n",
       "125    Fruit    Egg  Diapers   Butter   Bread   Beer  None      0.0\n",
       "126     Milk  Fruit      Egg  Diapers  Butter  Bread  Beer      0.0\n",
       "\n",
       "[127 rows x 8 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def calculate_c_level_permutations(previous_permutations, columns, level):\n",
    "  columns = pd.DataFrame(columns.reshape(-1,1))\n",
    "  previous_permutations = pd.DataFrame(previous_permutations.reshape(-1,level))\n",
    "  cartesian = previous_permutations.merge(columns, how='cross')\n",
    "  filtered_cartesian = cartesian[(cartesian.iloc[:,0:-1].min(axis=1) > cartesian.iloc[:,-1])]\n",
    "  return filtered_cartesian.to_numpy()\n",
    "\n",
    "def get_all_permutations(columns):\n",
    "  level = 1\n",
    "  c = calculate_c_level_permutations(columns,columns,1)\n",
    "  all = []\n",
    "  for item in columns:\n",
    "    all.append(np.array([item], dtype=object))\n",
    "  for item in c:\n",
    "    all.append(item)\n",
    "\n",
    "  while(len(c) > 0):\n",
    "    level += 1\n",
    "    c = calculate_c_level_permutations(c,columns,level)\n",
    "    for item in c:\n",
    "      all.append(item)\n",
    "  return all\n",
    "def calculate_support(permutation, df):\n",
    "  permutation = [p for p in permutation.values if p is not None]\n",
    "  return df[permutation].prod(axis=1).sum()/df.shape[0]\n",
    "columns = df.columns.values\n",
    "permutations = get_all_permutations(columns)\n",
    "support_all = pd.DataFrame(permutations)\n",
    "support_all['support'] = support_all.apply(lambda x: calculate_support(x,df),axis=1)\n",
    "support_all"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are not even going to test the brute force algorithm on the marketbasket dataset. It would evaluate $2^255$ permutations, which is waaay too much. We are just going to test the implementation on the first 12 columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: total: 2.47 s\n",
      "Wall time: 2.47 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "columns = marketbasket.columns.values[:12]\n",
    "permutations = get_all_permutations(columns)\n",
    "support_all = pd.DataFrame(permutations)\n",
    "support_all['support'] = support_all.apply(lambda x: calculate_support(x,marketbasket),axis=1)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Apriori\n",
    "\n",
    "The most common algorithm of discovering frequent datasets is called Apriori. Note that the algorithm is indifferent to used metrics, or a set of metrics used in the algorithm (in this case, we are using support). We could use this algorithm with any set of measures, as long as for every used metrics\n",
    "\n",
    "$$B \\subseteq A ‚áí m(A) \\ge m(B), $$\n",
    "\n",
    "If $B$ is a subset of $A$, than a value of metric $m$ for a set $A$ is greater or equal than value of this metric for a set $B$. Note that this is true for support, and it's not true for confidence. Hence, the algorithm is used for the support metric, and once frequent itemsets are obtained, the confidence is calculated for each of them. If a rule doesn't fulfill the threshold for confidence it's removed after discovering frequent itemsets.\n",
    "\n",
    "In fact the Apriori algorithm has complexity of $\\mathcal{O}(2^n)$ (both time and space complexity). At first glance it wouldn't perform much better than the brute force, however the average computation time for this algorithm is much lower than the exhaustive algorithm. Especially for sparse datasets.\n",
    "\n",
    "The implementation of Apriori algorithm is very similar to our current brute-force implementation. The algorithm goes like this:\n",
    "\n",
    "Input:\n",
    "   - threshold t\n",
    "   - metric m\n",
    "\n",
    "Output:\n",
    "   - Frequent sets\n",
    "\n",
    "Algorithm:\n",
    "\n",
    "  1. Frequent sets = [ ]\n",
    "  2. The initial set of candidate itemsets consists of subsets of a size 1.\n",
    "  3. Prune the set of candidates. Remove the itemsets with m(itemset) < t.\n",
    "  4. Append pruned set to Frequent sets\n",
    "  5. While the size of pruned set is greater than 0.\n",
    "\n",
    "\n",
    "      a. Create candidate itemset, by appending each item to every entry in the pruned set\n",
    "\n",
    "      a1. Remove the entries with repeated items from the candidate itemset (e.g. ['Milk','Bread','Milk'] should be removed)\n",
    "\n",
    "      a2. Remove duplicates from the candidate itemset (e.g. one of ['Milk','Bread'] or ['Bread','Milk'] should be removed)\n",
    "\n",
    "      b. Clear the pruned set.\n",
    "\n",
    "      c. Prune the set of candidates. Remove the itemsets with m(itemset) < t.\n",
    "\n",
    "      d. Append pruned set to Frequent sets.\n",
    "  6. Return Frequent sets\n",
    "\n",
    "## Exercise/homework:\n",
    "\n",
    "Implement your version the apriori algorithm, it doesn't have to be very efficient. You can use the 'support' metric to prune the candidate itemsets. Threshold should be a parameter of the implemented function.\n",
    "\n",
    "Compare the performance of two implementations (brute-force and apriori) using the large dataset imported at the beginning of this notebook.\n",
    "You might notice that the method of computing support and the list of candidates in the brute force example is inefficient. Feel free to work on the efficiency of those methods.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: total: 78.1 ms\n",
      "Wall time: 73.4 ms\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hair Conditioner</td>\n",
       "      <td>0.058780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lemons</td>\n",
       "      <td>0.030125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>98pct. Fat Free Hamburger</td>\n",
       "      <td>0.093314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sugar Cookies</td>\n",
       "      <td>0.055107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Onions</td>\n",
       "      <td>0.080088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Cottage Cheese</td>\n",
       "      <td>0.047759</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           0   support\n",
       "0           Hair Conditioner  0.058780\n",
       "1                     Lemons  0.030125\n",
       "2  98pct. Fat Free Hamburger  0.093314\n",
       "3              Sugar Cookies  0.055107\n",
       "4                     Onions  0.080088\n",
       "5             Cottage Cheese  0.047759"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "columns = marketbasket.columns.values[:15]\n",
    "permutations = get_all_permutations(columns, 0.03)\n",
    "support_all = pd.DataFrame(permutations)\n",
    "support_all['support'] = support_all.apply(lambda x: calculate_support(x,marketbasket),axis=1)\n",
    "support_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: total: 23.5 s\n",
      "Wall time: 23.5 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hair Conditioner</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.058780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lemons</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.030125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>98pct. Fat Free Hamburger</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.093314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sugar Cookies</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.055107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Onions</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.080088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>White Bread</td>\n",
       "      <td>Wheat Bread</td>\n",
       "      <td>2pct. Milk</td>\n",
       "      <td>0.031594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256</th>\n",
       "      <td>White Bread</td>\n",
       "      <td>Wheat Bread</td>\n",
       "      <td>Eggs</td>\n",
       "      <td>0.030125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>Toothpaste</td>\n",
       "      <td>Eggs</td>\n",
       "      <td>2pct. Milk</td>\n",
       "      <td>0.030860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>Wheat Bread</td>\n",
       "      <td>Eggs</td>\n",
       "      <td>2pct. Milk</td>\n",
       "      <td>0.030860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>Sweet Relish</td>\n",
       "      <td>Hot Dogs</td>\n",
       "      <td>Hot Dog Buns</td>\n",
       "      <td>0.030125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>260 rows √ó 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             0            1             2   support\n",
       "0             Hair Conditioner         None          None  0.058780\n",
       "1                       Lemons         None          None  0.030125\n",
       "2    98pct. Fat Free Hamburger         None          None  0.093314\n",
       "3                Sugar Cookies         None          None  0.055107\n",
       "4                       Onions         None          None  0.080088\n",
       "..                         ...          ...           ...       ...\n",
       "255                White Bread  Wheat Bread    2pct. Milk  0.031594\n",
       "256                White Bread  Wheat Bread          Eggs  0.030125\n",
       "257                 Toothpaste         Eggs    2pct. Milk  0.030860\n",
       "258                Wheat Bread         Eggs    2pct. Milk  0.030860\n",
       "259               Sweet Relish     Hot Dogs  Hot Dog Buns  0.030125\n",
       "\n",
       "[260 rows x 4 columns]"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "columns = marketbasket.columns.values\n",
    "permutations = get_all_permutations(columns, 0.03)\n",
    "support_all = pd.DataFrame(permutations)\n",
    "support_all['support'] = support_all.apply(lambda x: calculate_support(x,marketbasket),axis=1)\n",
    "support_all"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## A ready, efficient implementation of Apriori.\n",
    "\n",
    "To complete the exercise we will need the `mlextend` library since `scikit-learn` does not provide any tools for frequent itemset or association rule discovery."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from mlxtend.frequent_patterns import apriori\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: total: 0 ns\n",
      "Wall time: 0 ns\n",
      "      support                                itemsets\n",
      "0    0.058780                      (Hair Conditioner)\n",
      "1    0.030125                                (Lemons)\n",
      "2    0.093314             (98pct. Fat Free Hamburger)\n",
      "3    0.055107                         (Sugar Cookies)\n",
      "4    0.080088                                (Onions)\n",
      "..        ...                                     ...\n",
      "255  0.033064   (Toothpaste, White Bread, 2pct. Milk)\n",
      "256  0.031594  (Wheat Bread, White Bread, 2pct. Milk)\n",
      "257  0.030125               (Eggs, White Bread, Cola)\n",
      "258  0.032329         (Eggs, White Bread, Toothpaste)\n",
      "259  0.030125        (Wheat Bread, Eggs, White Bread)\n",
      "\n",
      "[260 rows x 2 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\kubad\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\mlxtend\\frequent_patterns\\fpcommon.py:110: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "%time\n",
    "\n",
    "\n",
    "frequent_itemsets = apriori(marketbasket, min_support=0.03, use_colnames=True)\n",
    "print(frequent_itemsets)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the frequent datasets discovery implemented, we can apply the confidence threshold to the discovered frequent sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from mlxtend.frequent_patterns import association_rules\n",
    "\n",
    "association_rules(frequent_itemsets, \n",
    "                  metric='confidence', \n",
    "                  min_threshold=0.8)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the first part of the Association rules/Frequent Datasets notebook. Next week we're going to get familiar with the ECLAT and FP-growth algorithms as well as a ready implementation of all three algorithms in Python in the mlxtend package."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
